#ifndef HASHTABLE_H
#define HASHTABLE_H

#include <stdio.h>
#include <math.h>
#include "ListGeneric.h"
#include "Global.h"
#include "Section.h"

/**
 * @return a table of HASHLENGTH elements
 * @brief Create a table of HASHLENGTH elements.
 *
 */
LIST* CreateHashTable();

/**
 * @param string char* to test.
 * @return int between 0 and HASHLENGTH
 * @brief Function of hash, generate an index between 0 and HASHLENGTH for the hash's table.
 *
 */
int Hash(char * string);

/**
 * @param hash LIST** to update and string char* to test.
 * @brief Updating of hash's table with the new sting at the index generated by the function Hash.
 *
 */
int AddHashTable(LIST **hash, SECTION *label);

/**
 * @param hashTable LIST* to display.
 * @brief Display the hash's table thanks to the function display of the list.
 *
 */
void DisplayHashTable(LIST* hashTable);

/**
 * @param hash Pointer on the hashTable.
 * @brief Desallocate all elements of the hashTable.
 *
 */
void ErasedHashTable(LIST** hash);

#endif
