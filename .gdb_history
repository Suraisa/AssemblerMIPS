b 50
run
dashboard source -output /dev/pts/0
dashboard sourceq -output /dev/pts/0
dashboard -output /dev/pts/0
n
n
n
n
n
n
n
n
n
run
n
dashboard -configuration ~/.gdbinit.d/auto
q
run
dashboard -output /dev/pts/0
dashboard -output /dev/pts/0
n
run
b 50
run
dashboard -configuration ~/.gdbinit.d/auto
dashboard -configuration ~/.gdbinit/auto
dashboard -configuration ~/.gdbinit
dashboard -configuration ~/.gdbinit/auto
q
b 50
ru
q
b 40
run
n!
help
n
help
q
b 50
run
n
c
c
n
b 50
n
run
s
n
n
s
stack
help
stack
tracepoints
help stack
stack backtrace
n
help stack
help
apropos stack
p stack
n
stack
info frame
n
n
q
b FSMCollection.c:546
run
p sectionAdded 
n
p sectionAdded 
n
n
p sectionAdded 
p (SECTION*)sectionAdded 
p *(SECTION*)sectionAdded 
p *(SECTION*)sectionAdded q
q
b SymbolTreatment.c:64
run
p symbolSection
p sectionData
p symbolSectionq
q
q
q
run
p argv
p shstrtab->start
p shstrtab->start
backtrace
p collectionSection[element[index].sectionType]
p element[index].sectionType
p element[index].sectionType
p element[index].sectionTypeq
q
b SymbolTreatment.c:48
run
p elf_get_string_offset( strtab->start, strtab->sz, allSymbols[index] )
p allSymbols [index]
p element[index].shift
p elf_get_string_index( shstrtab->start, shstrtab->sz, collectionSection[element[index].sectionType] )
p element[index].sectionType 
q
b SymbolTreatment.c:48
run
n
c
p elf_get_string_offset( strtab->start, strtab->sz, allSymbols[index] )
p element[index].shift
p ELF32_ST_INFO( type, STT_NOTYPE )
n
n
n
n
p ELF32_ST_INFO( type, STT_NOTYPE )
n
p symTableElements[index].st_info
p elf_get_string_index( shstrtab->start, shstrtab->sz, collectionSection[element[index].sectionType] )
q
