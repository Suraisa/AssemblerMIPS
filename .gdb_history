n
c
c
n
b 50
n
run
s
n
n
s
stack
help
stack
tracepoints
help stack
stack backtrace
n
help stack
help
apropos stack
p stack
n
stack
info frame
n
n
q
b FSMCollection.c:546
run
p sectionAdded 
n
p sectionAdded 
n
n
p sectionAdded 
p (SECTION*)sectionAdded 
p *(SECTION*)sectionAdded 
p *(SECTION*)sectionAdded q
q
b SymbolTreatment.c:64
run
p symbolSection
p sectionData
p symbolSectionq
q
q
q
run
p argv
p shstrtab->start
p shstrtab->start
backtrace
p collectionSection[element[index].sectionType]
p element[index].sectionType
p element[index].sectionType
p element[index].sectionTypeq
q
b SymbolTreatment.c:48
run
p elf_get_string_offset( strtab->start, strtab->sz, allSymbols[index] )
p allSymbols [index]
p element[index].shift
p elf_get_string_index( shstrtab->start, shstrtab->sz, collectionSection[element[index].sectionType] )
p element[index].sectionType 
q
b SymbolTreatment.c:48
run
n
c
p elf_get_string_offset( strtab->start, strtab->sz, allSymbols[index] )
p element[index].shift
p ELF32_ST_INFO( type, STT_NOTYPE )
n
n
n
n
p ELF32_ST_INFO( type, STT_NOTYPE )
n
p symTableElements[index].st_info
p elf_get_string_index( shstrtab->start, shstrtab->sz, collectionSection[element[index].sectionType] )
q
b SymbolTreatment.c:25
run
p relocElement ->typeRMIPS 
p ELF32_R_INFO(elf_get_sym_index_from_name(symtab, shstrtab, strtab, collectionSection[relocElement->symbolSection]),relocElement->typeRMIPS)
p relocTable.table[index].r_info
p printf("%08x",relocTable.table[index].r_info)
p printf("%08x",relocTable.table[index])
p relocTable.table[index]
c
p relocTable.table[index]
c
p relocTable.table[index]
c
p relocTable.table[index]
p relocTable.table[index].r_info
b SymbolTreatment.c:54
run
p symTableElements[index]
c
p symTableElements[index]
c
p symTableElements[index]
c
p symTableElements[index]
c
p symTableElements[index]
c
p symTableElements[index]
p elf_get_sym_index_from_name(symtab, shstrtab, strtab, collectionSection[relocElement->symbolSection])
c
c
c
p elf_get_sym_index_from_name(symtab, shstrtab, strtab, collectionSection[relocElement->symbolSection])
p relocElement->symbolSection
p symtab
p *symtab
p symtab[0]
p symtab[1]
p shstrtab[1]
p strtab[1]
p strtab[0]
p strtab[2]
p strtab[1]
p DisplayLexeme
q
b SymbolTreatment.c:25
run
p -1<<8
p -1<<8+4
p 4
p -1<<8+4
p (-1<<8) + 4
p -1<<8 + 4
p 00000000
0000000405020000
0000000804000000
0000000c06020000
000000101c000000
0000001404010000
000000182c000000
p (((-1)<<8)+(unsigned char)(4))
c
c
c
p relocTable.table[index]
p elf_get_sym_index_from_name(symtab, shstrtab, strtab, collectionSection[relocElement->symbolSection])
p ,relocElement->typeRMIPS
p relocElement->typeRMIPS
q
b SymbolTreatment.c:25
run
c
c
c
c
p relocElement->typeRMIPS
p (int)relocElement->typeRMIPS
p ELF32_R_INFO(elf_get_sym_index_from_name(symtab, shstrtab, strtab, collectionSection[relocElement->symbolSection]),relocElement->typeRMIPS)
p ELF32_R_INFO(elf_get_sym_index_from_name(symtab, shstrtab, strtab, collectionSection[relocElement->symbolSection]),(int)relocElement->typeRMIPS)
c
q
run
b SymbolTreatment.c:25
run
c
c
c
p ELF32_R_INFO(elf_get_sym_index_from_name(symtab, shstrtab, strtab, collectionSection[relocElement->symbolSection]),(int)relocElement->typeRMIPS)
p ELF32_R_INFO(elf_get_sym_index_from_name(symtab, shstrtab, strtab, collectionSection[relocElement->symbolSection]),relocElement->typeRMIPS)
p relocTable.table[index].r_info == ELF32_R_INFO(elf_get_sym_index_from_name(symtab, shstrtab, strtab, collectionSection[re
p relocTable.table[index].r_info
p (int)relocTable.table[index].r_info
p (unsigned int)relocTable.table[index].r_info
q
b SymbolTreatment.c:25
run
p (unsigned int)-1
p (unsigned int)-1<<8
p (unsigned int)(-1<<8+4)
x (unsigned int)(-1<<8+4)
px (unsigned int)(-1<<8+4)
xp (unsigned int)(-1<<8+4)
x (unsigned int)(-1<<8+4)
q
b FSMOperand.c:358
run
runq
q
run
bt
q
b 45
run
p '\0' == 0
q
run
p text->start
p data->start
p bss->start
p shstrtab->start
p strtab->start
runq
q
b SymbolTreatment.c:26
run
n
p r_info 
c
p r_info 
c
p r_info 
c
p r_info 
p r_info n
,
n
p relocTable.table[index].r_info
q
run
bt
b
q
run
bt
q
run
p instBitTreatment.bitField[indexSlider].iInst
p dicoInstruct
p instBitTreatment.bitField[indexSlider].iIq
q
run
p dicoInstruct
q
run
q
b
b main.c
b 50
run
n
n
p dictionary
p *dictionary
q
run
bt
p hasBaseOffset 
p indexRegisterDico
p instData.lexemeList[indexRegister]
b 50
run
n
p *dictionary 
q
